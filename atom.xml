<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>前端 - 分享园</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tomieric.github.io/"/>
  <updated>2016-09-04T07:11:21.000Z</updated>
  <id>http://tomieric.github.io/</id>
  
  <author>
    <name>TommyShao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于jQuery的（m）VC 库</title>
    <link href="http://tomieric.github.io/2016/03/14/jQuery-Spine/"/>
    <id>http://tomieric.github.io/2016/03/14/jQuery-Spine/</id>
    <published>2016-03-13T16:00:00.000Z</published>
    <updated>2016-09-04T07:11:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>此处文章只针对比如 jquery 无其他相关框架的页面进行改造，至于其他框架暂时不说</p>
</blockquote>
<p>以往我们做数据填充时经常搭配<code>jquery.tmpl.js</code>或则<code>arttemplate.js</code>模板等，在数据填充后往往需要重新绑定里面的元素的交互事件。对此重复去写这样的代码效率且显得不那么高。</p>
<p>在视图-模型-控制器（mvc）里面提供给我们很方便的语法结构，更简便的编写这类相关的业务，但在小的功能页面上如果使用<code>Backbone</code>这类的框架显得页面静态资源稍微臃肿。</p>
<p>请先阅读 <a href="http://purplebamboo.github.io/2015/03/16/javascript-component/" target="_blank" rel="external">javascript组件化</a> 这篇文章，本文中的 <code>Spine</code>是基于该文章的源码进行改进</p>
<p><code>Spine</code>提供我们 <code>oo</code> 编程语法糖，组件于组件之间通过继承扩展来开发富应用组件，同时事件通过订阅-发布的模式实现，内置了 <code>underscore</code> 的 <code>template</code> 功能。完整的实现了 <code>Mini</code> 版的 <code>Backbone</code>功能，相比之下少了 <code>router</code>功能（可以参照使用<a href="https://github.com/flatiron/director" target="_blank" rel="external">director.js</a>)</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>首先我们来看看 <code>Spine</code> 的使用语法，跟 <code>Backbone</code> 的用法相似我们使用 <code>Spine.extend</code> 函数来扩展一个组件类。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> AppView = Spine.extend(&#123;</div><div class="line">    <span class="comment">// 初始化</span></div><div class="line">    initiliaze: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">//...</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>我们定义了 <code>initiliaze</code> 函数，类似于 <code>AppView</code> 的构造函数，在函数内部我们可以直接用 <code>this</code> 去获取对象的方法或配置参数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> AppView = Spine.extend(&#123;</div><div class="line">    <span class="comment">// 初始化</span></div><div class="line">    initiliaze: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> msg = <span class="keyword">this</span>.get(<span class="string">'greeting'</span>)</div><div class="line">        <span class="keyword">this</span>.sayHi(msg)</div><div class="line">    &#125;,</div><div class="line">    sayHi: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(msg)</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>当我们没有去实例化 <code>AppView</code>时，并不会执行初始化里面的语句。那我们如何去调用呢？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> AppView(&#123;</div><div class="line">    greeting: <span class="string">'Hello World'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>这时候我们在浏览器的控制台可以看到打印出来 <code>Hello World</code></p>
<h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><p>既然是组件必少不了用户点击交互等事件，在 <code>Spine</code> 里面如何去绑定事件呢？ </p>
<p>通过 <code>EVENTS</code> 配置对象去声明，先声明 <code>选择器：{ event1:fn, event2: fn }</code>,这点有区别于 <code>Backbone</code> 中的写法 <code>选择器 event1: fn,选择器 event2: fn</code></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> AppView = Spine.extend(&#123;</div><div class="line">    initiliaze: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;,</div><div class="line">    EVENTS: &#123;</div><div class="line">        <span class="string">'.btn'</span>: &#123;</div><div class="line">            click: <span class="function"><span class="keyword">function</span><span class="params">(self, e)</span> </span>&#123;</div><div class="line">                e.preventDefault()</div><div class="line"></div><div class="line">                <span class="comment">// self 指向实例对象</span></div><div class="line">                <span class="keyword">self</span>.sayHi()</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    ...</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>实例化 <code>AppView</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> AppView(&#123;</div><div class="line">    parentNode: <span class="string">'#demo'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>注意，声明绑定事件时最好在实例化传入配置参数 <code>parentNode</code> 表示 dom 的作用域，忽略不传默认为 <code>document.body</code> 用于作为事件代理的主容器，同于 <code>Backbone</code> 当中的 <code>el</code> 参数</p>
<p><code>Spine</code> 的事件绑定同于 <code>jQuery</code> 的绑定方法，比如第三方插件的事件</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> AppView = Spine.extend(&#123;</div><div class="line">    <span class="params">...</span></div><div class="line">    EVENTS: &#123;</div><div class="line">        <span class="string">'.datetime'</span> : &#123;</div><div class="line">            <span class="comment">// self - 实例化对象</span></div><div class="line">            <span class="comment">// e - jquery 中事件默认参数 event</span></div><div class="line">            <span class="comment">// date 第三方插件提供的event data </span></div><div class="line">            <span class="string">'choose.ui.datetimepicker'</span>: function(<span class="built_in">self</span>, e, <span class="built_in">date</span>) &#123;</div><div class="line">                <span class="built_in">self</span>.fetch(&#123; <span class="built_in">date</span>: <span class="built_in">date</span> &#125;)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="params">...</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="模板视图"><a href="#模板视图" class="headerlink" title="模板视图"></a>模板视图</h3><p>既然是 （m）vc 库自然少不了 <code>view</code> 模板引擎，<code>Spine</code> 使用的是 <code>underscore</code> 的 <code>template</code>，语法相同</p>
<figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="xml">...</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    ...</div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"listView"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- list 模板 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/html"</span> <span class="attr">id</span>=<span class="string">"listView-tmpl"</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">for</span>(<span class="attr">var</span> <span class="attr">i</span> = <span class="string">0;</span> <span class="attr">i</span> &lt; <span class="attr">list.length</span>; <span class="attr">i</span>++) &#123; %&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="template-tag">&#123;%= <span class="name">list</span>[i].value %&#125;</span><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>js 中声明</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> AppView = Spine.extend(&#123;</div><div class="line">    initiliaze: function() &#123;</div><div class="line">        <span class="keyword">this</span>.$view = <span class="keyword">this</span>.<span class="keyword">get</span>(<span class="string">'view'</span>)</div><div class="line">        <span class="keyword">this</span>.template = <span class="keyword">this</span>.<span class="keyword">get</span>(<span class="string">'template'</span>)</div><div class="line"></div><div class="line">        <span class="keyword">var</span> listData = [</div><div class="line">            &#123;text: <span class="number">1</span>, value: <span class="number">1</span>&#125;</div><div class="line">            &#123;text: <span class="number">2</span>, value: <span class="number">2</span>&#125;</div><div class="line">            &#123;text: <span class="number">3</span>, value: <span class="number">3</span>&#125;</div><div class="line">            ...</div><div class="line">        ]</div><div class="line">        <span class="keyword">this</span>.render(listData) </div><div class="line">    &#125;,</div><div class="line">    render(<span class="keyword">data</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.$view.empty().html(<span class="keyword">this</span>._parseTemplate(<span class="keyword">this</span>.template, <span class="keyword">data</span>))</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="扩展视图纯填充组件"><a href="#扩展视图纯填充组件" class="headerlink" title="扩展视图纯填充组件"></a>扩展视图纯填充组件</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 通用视图对象</span></div><div class="line"><span class="comment">// 依赖Spine.js</span></div><div class="line"><span class="comment">// 扩展SpineJS</span></div><div class="line"><span class="comment">// by tommyshao</span></div><div class="line"><span class="comment">// ---------</span></div><div class="line"><span class="keyword">var</span> PartialView = Spine.extend(&#123;</div><div class="line">    <span class="comment">// 初始化</span></div><div class="line">    initialize: function() &#123;</div><div class="line">        <span class="comment">// 实例化获取配置</span></div><div class="line">        <span class="keyword">this</span>.$el = <span class="keyword">this</span>.<span class="keyword">get</span>(<span class="string">'parentNode'</span>);</div><div class="line">        <span class="keyword">this</span>.template = <span class="keyword">this</span>.<span class="keyword">get</span>(<span class="string">'template'</span>).html();</div><div class="line"></div><div class="line">        </div><div class="line">        <span class="comment">// 外部定义事件</span></div><div class="line">        <span class="keyword">this</span>.EVENTS = <span class="keyword">this</span>.<span class="keyword">get</span>(<span class="string">'EVENTS'</span>);</div><div class="line">        <span class="keyword">this</span>._delegateEvent();</div><div class="line"></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 惰性渲染</span></div><div class="line">    <span class="comment">// data接收数据</span></div><div class="line">    render: function(<span class="keyword">data</span>) &#123;</div><div class="line">        <span class="keyword">data</span> = <span class="keyword">data</span> || &#123;&#125;;</div><div class="line">        <span class="comment">// 利用内置模板引擎编译模板获取编译后的内容</span></div><div class="line">        <span class="keyword">var</span> template = <span class="keyword">this</span>._parseTemplate(<span class="keyword">this</span>.template, <span class="keyword">data</span>);</div><div class="line">        <span class="comment">// 重新渲染数据</span></div><div class="line">        <span class="keyword">this</span>.$el.empty().append(template);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/* </span></div><div class="line">Spine.min = function(config) &#123;</div><div class="line">    return new PartialView(config)</div><div class="line">&#125; </div><div class="line">*/</div></pre></td></tr></table></figure>
<p>使用方式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> listView = <span class="keyword">new</span> PartialView(&#123;</div><div class="line">    parentNode: $(<span class="string">'#listView'</span>),</div><div class="line">    template: $(<span class="string">'#listView-tmpl'</span>),</div><div class="line">    EVENTS: &#123;</div><div class="line">        <span class="comment">// 自定义事件</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;此处文章只针对比如 jquery 无其他相关框架的页面进行改造，至于其他框架暂时不说&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以往我们做数据填充时经常搭配&lt;code&gt;jquery.tmpl.js&lt;/code&gt;或则&lt;code&gt;arttemplate
    
    </summary>
    
      <category term="javascript" scheme="http://tomieric.github.io/categories/javascript/"/>
    
    
      <category term="jquery" scheme="http://tomieric.github.io/tags/jquery/"/>
    
      <category term="mvc" scheme="http://tomieric.github.io/tags/mvc/"/>
    
      <category term="Backbone" scheme="http://tomieric.github.io/tags/Backbone/"/>
    
      <category term="spine" scheme="http://tomieric.github.io/tags/spine/"/>
    
  </entry>
  
  <entry>
    <title>拥抱ES6(一) - 认识babel</title>
    <link href="http://tomieric.github.io/2016/02/21/get-stared-use-es6/"/>
    <id>http://tomieric.github.io/2016/02/21/get-stared-use-es6/</id>
    <published>2016-02-20T16:00:00.000Z</published>
    <updated>2016-09-04T05:42:36.000Z</updated>
    
    <content type="html"><![CDATA[<!-- endcontent --><div class="figure figure--fullWidth"><img class="figure-img" src="/assets/images/post/20160107202032_470.jpg" alt="Lost ES6"><span class="caption">Lost ES6</span></div><!-- content -->
<blockquote>
<p>Babel 是一个 JavaScript 编译器。<br>今天就来用下一代 JavaScript 语法写代码吧！</p>
</blockquote>
<p>EMAscript已经发布了<code>es2015</code>也就是<code>ES6</code>, 提供了丰富的API和函数编程语法，但由于各浏览器的支持性还是有限，我们需要折衷的办法——编译器。</p>
<p>早在<code>ES6</code>发布前，<code>babel</code>已经活跃在前端开发社区中，比如facebooke的开源框架<code>react</code>就很早使用了<code>babel</code></p>
<h2 id="安装babel"><a href="#安装babel" class="headerlink" title="安装babel"></a>安装babel</h2><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">[sudo]</span> npm install -g babel</div></pre></td></tr></table></figure>
<p>安装完成后可以在终端中使用<code>babel</code>命令</p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul>
<li><code>-o</code> 编译输出文件</li>
<li><code>-s [inline]</code> 生成<code>sourcemap</code>文件</li>
</ul>
<p><strong>example</strong></p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">babel <span class="keyword">script</span>.es -o <span class="keyword">script</span>.js</div></pre></td></tr></table></figure>
<p>用<code>*.es</code>命名文件是更好的区分es6语法源文件和编译文件</p>
<p>babel有许多优秀的插件，利用插件我们可以将<code>es6</code>语法转化成相应的对应<code>javascript</code>版本文件</p>
<p><strong>插件集合</strong></p>
<p><a href="http://babeljs.io/docs/plugins/" target="_blank" rel="external">http://babeljs.io/docs/plugins/</a></p>
<p>我们需要通过使用插件来支持最新的<code>es</code>语法，现在我们使用最新的<code>ES6</code>语法，将使用<code>ES2015 preset</code>这个插件</p>
<p><a href="http://babeljs.io/docs/plugins/preset-es2015/" target="_blank" rel="external">http://babeljs.io/docs/plugins/preset-es2015/</a></p>
<h3 id="安装-babel-preset-es2015"><a href="#安装-babel-preset-es2015" class="headerlink" title="安装 babel-preset-es2015"></a>安装 <code>babel-preset-es2015</code></h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> babel-preset-es2015</div></pre></td></tr></table></figure>
<h3 id="配置-babelrc"><a href="#配置-babelrc" class="headerlink" title="配置.babelrc"></a>配置<code>.babelrc</code></h3><p>babel的编译可以通过读取<code>.babelrc</code>文件配置中的<code>presets</code>插件集进行编译。</p>
<p>为项目创建一个<code>.babelrc</code> 文件</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">touch</span> <span class="selector-class">.babelrc</span></div></pre></td></tr></table></figure>
<p>我们可以看到当前目录下增加了这个文件，然后编辑声明使用<code>es2015</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// .babelrc</span></div><div class="line">&#123;</div><div class="line">	<span class="string">"presets"</span> : [<span class="string">"es2015"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>重新编译<code>script.es</code>文件</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">babel <span class="keyword">script</span>.es -o <span class="keyword">script</span>.js</div></pre></td></tr></table></figure>
<p>源文件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// script.es</span></div><div class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</div></pre></td></tr></table></figure>
<p>编译完成文件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// script.js</span></div><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">//# sourceMappingURL=script.js.map</span></div></pre></td></tr></table></figure>
<h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><p><a href="http://babeljs.io/" target="_blank" rel="external">http://babeljs.io/</a></p>
<p><a href="http://babeljs.cn/" target="_blank" rel="external">http://babeljs.cn/ 中文</a></p>
<p><a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6 入门</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- endcontent --&gt;&lt;div class=&quot;figure figure--fullWidth&quot;&gt;&lt;img class=&quot;figure-img&quot; src=&quot;/assets/images/post/20160107202032_470.jpg&quot; alt=&quot;Lost 
    
    </summary>
    
      <category term="javascript" scheme="http://tomieric.github.io/categories/javascript/"/>
    
    
      <category term="es6" scheme="http://tomieric.github.io/tags/es6/"/>
    
      <category term="babel" scheme="http://tomieric.github.io/tags/babel/"/>
    
      <category term="javascript" scheme="http://tomieric.github.io/tags/javascript/"/>
    
      <category term="js" scheme="http://tomieric.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://tomieric.github.io/2016/02/20/hello-world/"/>
    <id>http://tomieric.github.io/2016/02/20/hello-world/</id>
    <published>2016-02-19T16:00:00.000Z</published>
    <updated>2016-09-04T05:42:36.000Z</updated>
    
    <content type="html"><![CDATA[<!-- endcontent --><div class="figure figure--fullWidth"><img class="figure-img" src="/assets/images/background.jpg" alt="A beautiful sunrise"><span class="caption">A beautiful sunrise</span></div><!-- content -->
<p>由于旧博客用<code>airpub.io</code>，多说的账号被<code>CSRF</code>攻击造成大部分博文被注入删除</p>
<p>说多了都是泪<del>~~(&gt;_&lt;)</del>~~</p>
<p>已经决定了新博客用<code>hexo</code></p>
<h3 id="博客历程"><a href="#博客历程" class="headerlink" title="博客历程"></a>博客历程</h3><ul>
<li>大学时期用免费asp主机，html模板</li>
<li>上班后用博客园</li>
<li>为了更多酷炫皮肤，用wordpress</li>
<li>打破限制，用免费php主机跑wordpress，买过域名<code>www.fenxiangyuan.com</code></li>
<li>累了，用gitpage，静态html，域名过期续不了，换成<code>http://www.get2e.com</code></li>
<li>启用<code>airpub</code>,在gitpage上直接动态写文章，不用经常git操作</li>
<li>发简历给猎头，猎头说博客东西好少，看了一下原来被攻击，好多文章丢失了，也找不回了，在多说上没有备份</li>
<li>决定还是以静态方式，选择hexo因为模板够漂酿。实在没钱买VPS，掏捣nodejs去搭建个博客。</li>
</ul>
<h3 id="关于博客发布"><a href="#关于博客发布" class="headerlink" title="关于博客发布"></a>关于博客发布</h3><p>文档看的一头雾水，发布目录只能在hexo项目目录里</p>
<p>只能把项目弄到<code>admin</code>目录，<code>hexo deploy</code>生成的<code>public</code>目录，通过<code>gulpfile</code>（工作用这个比较熟）拷贝到根目录并清空<code>public</code>目录。</p>
<p>终于搞定了，在一个周末的下午。</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- endcontent --&gt;&lt;div class=&quot;figure figure--fullWidth&quot;&gt;&lt;img class=&quot;figure-img&quot; src=&quot;/assets/images/background.jpg&quot; alt=&quot;A beautiful sunris
    
    </summary>
    
      <category term="杂谈" scheme="http://tomieric.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://tomieric.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>jQuery核心函数队列</title>
    <link href="http://tomieric.github.io/2015/04/10/jquery-queue/"/>
    <id>http://tomieric.github.io/2015/04/10/jquery-queue/</id>
    <published>2015-04-09T16:00:00.000Z</published>
    <updated>2016-09-04T05:42:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先先说个例子</p>
<p>之前在做一个多个进度条动画时写了个东西</p>
<p><a href="http://sandbox.runjs.cn/show/ytyxhtib" target="_blank" rel="external">http://sandbox.runjs.cn/show/ytyxhtib</a></p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* progress bar</div><div class="line">* by tomieric</div><div class="line">* http://getf2e.com</div><div class="line">*/</div><div class="line">$.fn.extend(&#123;</div><div class="line">	<span class="string">'progressbar'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">config</span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> opt = $.extend(&#123;</div><div class="line">			parent: <span class="literal">null</span>,</div><div class="line">			callback: $.noop,</div><div class="line">			duration: <span class="number">200</span></div><div class="line">		&#125;, config ||&#123;&#125;);</div><div class="line"></div><div class="line"></div><div class="line">		<span class="keyword">return</span> $(<span class="keyword">this</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> $self = $(<span class="keyword">this</span>), data = $self.data();</div><div class="line"></div><div class="line">					<span class="keyword">var</span> per = data.per;</div><div class="line">					(per = per  || <span class="number">0</span>) &amp;&amp; (per = per &gt; <span class="number">100</span> ? <span class="number">100</span> : per);</div><div class="line">					$self.animate(&#123; width: per+<span class="string">'%'</span>&#125;, opt.duration, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">						opt.callback();</div><div class="line">						fnDequeue();</div><div class="line">					&#125;)</div><div class="line"></div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">$(<span class="string">'.percent-bar'</span>).progressbar();</div></pre></td></tr></table></figure>
<p>我们可以看到所有进度条是一个同步的动画，那如果我们想有一个队列的效果，第一个动画执行完后再执行第二个有什么方法呢？</p>
<ul>
<li>css3动画transition-delay</li>
<li>js队列</li>
</ul>
<p>这里不讨论css3的写法，因为老板们想兼容更多的浏览器</p>
<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><blockquote>
<p>队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。</p>
</blockquote>
<p>这是百度百科上的解释。</p>
<p>我的理解是一个同步的动作，必需上一个任务者完成任务后再到当前动作，比如800米接力赛跑。</p>
<p>之前也写过队列的对象，在<a href="http://project.tomieric.com/christmas/" target="_blank" rel="external">圣诞倒计时</a>中。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> AnimQueque = &#123;</div><div class="line">	list: [],</div><div class="line">	add: <span class="function"><span class="keyword">function</span>(<span class="params">obj, cls, fn</span>)</span>&#123;</div><div class="line">		<span class="keyword">this</span>.list.push(&#123; obj: obj, cls: cls, fn: fn&#125;);</div><div class="line">	&#125;,</div><div class="line">	resolve: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> cache = <span class="keyword">this</span>.list.shift();</div><div class="line">		<span class="keyword">if</span>(!cache) <span class="keyword">return</span>;</div><div class="line">		<span class="keyword">this</span>.to(cache.obj, cache.cls, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">typeof</span> cache.fn === <span class="string">"function"</span> &amp;&amp; cache.fn();</div><div class="line">			AnimQueque.resolve();</div><div class="line">		&#125;);</div><div class="line">	&#125;,</div><div class="line">	to: <span class="function"><span class="keyword">function</span>(<span class="params">obj,cls, fn</span>) </span>&#123;</div><div class="line">		$(obj).addClass(cls).one(<span class="string">'webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend'</span>, fn);</div><div class="line">	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>利用队列数组将要改变的css变量存放起来，然后每次从数组顶部拿出一个css变量，监听每个css3动画结束回调函数，每次动画完成再执行第二个步骤形成一个递归。</p>
<h2 id="jQuery队列"><a href="#jQuery队列" class="headerlink" title="jQuery队列"></a>jQuery队列</h2><ul>
<li>queue(element, [queueName])<ul>
<li><code>element</code> 检测附加队列的DOM元素</li>
<li><code>queueName</code> 字符串值，包含序列的名称。默认是 fx, 标准的效果序列。</li>
<li><code>newQueue</code>:替换当前函数列队内容的数组</li>
<li><code>callback()</code>:要添加进队列的函数</li>
</ul>
</li>
<li>dequeue([queueName])<ul>
<li><code>queueName</code> 队列名，默认为fx</li>
</ul>
</li>
<li>clearQueue([queueName])<ul>
<li><code>queueName</code> 含有队列名的字符串。默认是”Fx”，动画队列。</li>
</ul>
</li>
</ul>
<p>好，现在我们来改造进度条那个例子。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* progress bar</div><div class="line">* by tomieric</div><div class="line">* http://getf2e.com</div><div class="line">*/</div><div class="line"></div><div class="line"></div><div class="line">$.fn.extend(&#123;</div><div class="line">	<span class="string">'progressbar'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">config</span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> opt = $.extend(&#123;</div><div class="line">			parent: <span class="literal">null</span>,</div><div class="line">			callback: $.noop,</div><div class="line">			duration: <span class="number">200</span></div><div class="line">		&#125;, config ||&#123;&#125;);</div><div class="line"></div><div class="line">		<span class="keyword">var</span> $body = $(<span class="built_in">document</span>.body),</div><div class="line">				_queue = [],</div><div class="line">				fnDequeue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; $body.dequeue(<span class="string">'jq.progressbar'</span>) &#125;;</div><div class="line"></div><div class="line">		$(<span class="keyword">this</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> $self = $(<span class="keyword">this</span>), data = $self.data();</div><div class="line">			<span class="keyword">if</span>(data.queque) <span class="keyword">return</span>;</div><div class="line">			_queue.push(</div><div class="line">				<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					<span class="keyword">var</span> per = data.per;</div><div class="line">					(per = per  || <span class="number">0</span>) &amp;&amp; (per = per &gt; <span class="number">100</span> ? <span class="number">100</span> : per);</div><div class="line">					$self.animate(&#123; width: per+<span class="string">'%'</span>&#125;, opt.duration, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">						opt.callback();</div><div class="line">						fnDequeue();</div><div class="line">					&#125;)</div><div class="line">				&#125;</div><div class="line">			);</div><div class="line"></div><div class="line">			$self.data(<span class="string">'queque'</span>, <span class="literal">true</span>);</div><div class="line">		&#125;);</div><div class="line"></div><div class="line">		<span class="comment">/*</span></div><div class="line">		* 用body唯一dom元素存放，$(this)是一个元素集合</div><div class="line">		*/</div><div class="line">		$body.queue(<span class="string">'jq.progressbar'</span>, _queue);</div><div class="line"></div><div class="line">		<span class="comment">// 触发堆栈</span></div><div class="line">		fnDequeue();</div><div class="line"></div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">$(<span class="string">'.percent-bar'</span>).progressbar(&#123;duration: <span class="number">500</span>&#125;);</div></pre></td></tr></table></figure>
<p>然后我们再来看看效果<a href="http://sandbox.runjs.cn/show/o3lknjcj" target="_blank" rel="external">http://sandbox.runjs.cn/show/o3lknjcj</a></p>
<p>fork <a href="http://runjs.cn/detail/o3lknjcj" target="_blank" rel="external">http://runjs.cn/detail/o3lknjcj</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先先说个例子&lt;/p&gt;
&lt;p&gt;之前在做一个多个进度条动画时写了个东西&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sandbox.runjs.cn/show/ytyxhtib&quot;&gt;http://sandbox.runjs.cn/show/ytyxhtib&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://tomieric.github.io/categories/JavaScript/"/>
    
    
      <category term="-jquery -javascript -插件" scheme="http://tomieric.github.io/tags/jquery-javascript-%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>nodeList-forEach</title>
    <link href="http://tomieric.github.io/2014/10/11/nodeList-foreach/"/>
    <id>http://tomieric.github.io/2014/10/11/nodeList-foreach/</id>
    <published>2014-10-10T16:00:00.000Z</published>
    <updated>2016-09-04T05:42:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="nodeList-forEach"><a href="#nodeList-forEach" class="headerlink" title="nodeList-forEach"></a>nodeList-forEach</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">array</span><span class="selector-class">.forEach</span>(<span class="selector-tag">callback</span><span class="selector-attr">[, thisArg]</span>)</div></pre></td></tr></table></figure>
<p><strong>描述</strong></p>
<p>forEach 方法按升序为数组中的每个有值的元素执行一次给定的 callback<br> 函数，只有在那些有值的索引上才会调用 callback 函数，那些被删除掉的索引或者从未赋值过的索引将会被跳过。</p>
<p>callback 函数会被依次传入三个参数：</p>
<ul>
<li>元素值</li>
<li>元素索引</li>
<li>被遍历的数组对象本身</li>
</ul>
<a id="more"></a>
<p>详细介绍</p>
<p> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach</a></p>
<p>1.nodeList能直接使用forEach函数么？</p>
<p>比如我们有下面这样的代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.querySelectorAll( <span class="string">'ul.grid &gt; li &gt; figure'</span> ).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">el, i</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(el);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>结果是出错了：</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TypeError: Object #&lt;NodeList&gt; <span class="keyword">has</span> no <span class="function"><span class="keyword">method</span> '<span class="title">forEach</span>'</span></div></pre></td></tr></table></figure>
<p>nodeList对象是没有forEach方法的，forEach方法是数组的一个内置方法。</p>
<p>那我们直接输出</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.<span class="built_in">querySelectorAll</span>( <span class="string">'ul.grid &gt; li &gt; figure'</span> )</div></pre></td></tr></table></figure>
<p>会得到什么，在控制台上可以看到一个数组对象。</p>
<p>我们知道nodeList是类似数组的对象，那可以通过Array.prototype.slice将nodeList转换成数组。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[]</span><span class="selector-class">.slice</span><span class="selector-class">.call</span>( document.querySelectorAll( <span class="string">'ul.grid &gt; li &gt; figure'</span> ) )<span class="selector-class">.forEach</span>( function( el, i ) &#123;</div><div class="line">    console<span class="selector-class">.log</span>(el);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;nodeList-forEach&quot;&gt;&lt;a href=&quot;#nodeList-forEach&quot; class=&quot;headerlink&quot; title=&quot;nodeList-forEach&quot;&gt;&lt;/a&gt;nodeList-forEach&lt;/h3&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.forEach&lt;/span&gt;(&lt;span class=&quot;selector-tag&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[, thisArg]&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;forEach 方法按升序为数组中的每个有值的元素执行一次给定的 callback&lt;br&gt; 函数，只有在那些有值的索引上才会调用 callback 函数，那些被删除掉的索引或者从未赋值过的索引将会被跳过。&lt;/p&gt;
&lt;p&gt;callback 函数会被依次传入三个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;元素值&lt;/li&gt;
&lt;li&gt;元素索引&lt;/li&gt;
&lt;li&gt;被遍历的数组对象本身&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://tomieric.github.io/categories/JavaScript/"/>
    
    
      <category term="-ES5 -javascript" scheme="http://tomieric.github.io/tags/ES5-javascript/"/>
    
  </entry>
  
  <entry>
    <title>FullPage.js尝试</title>
    <link href="http://tomieric.github.io/2014/09/25/fullpage/"/>
    <id>http://tomieric.github.io/2014/09/25/fullpage/</id>
    <published>2014-09-24T16:00:00.000Z</published>
    <updated>2016-09-04T05:42:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FullPage-js尝试"><a href="#FullPage-js尝试" class="headerlink" title="FullPage.js尝试"></a>FullPage.js尝试</h1><p>我们经常会经常看到这样的产品页</p>
<p><a href="http://www.mi.com/shouhuan" target="_blank" rel="external">http://www.mi.com/shouhuan</a></p>
<p>是不是觉得很高端大气上档次</p>
<p>那我们这样实现呢？</p>
<p>首先我们来做一个没有插件版的Fullscreen，使用原始的javascript,css3来实现。</p>
<a id="more"></a>
<ol>
<li>布局<br>我们把每页都绝对定位在body上 宽高为100%就可以满足全屏的布局</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 屏幕 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"stage stage1"</span> <span class="attr">id</span>=<span class="string">"slide1"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 内容 --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"stage stage2"</span> <span class="attr">id</span>=<span class="string">"slide2"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 内容 --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"stage stage3"</span> <span class="attr">id</span>=<span class="string">"slide3"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 内容 --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 导航 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide-nav"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#slide1"</span> <span class="attr">rel</span>=<span class="string">"0"</span> <span class="attr">class</span>=<span class="string">"on"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#slide2"</span> <span class="attr">rel</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#slide3"</span> <span class="attr">rel</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>添加每屏内容和样式动画之后</p>
<p><a href="http://ginosin.esy.es/fullscreen/example-1.html" target="_blank" rel="external">http://ginosin.esy.es/fullscreen/example-1.html</a></p>
<ol>
<li>js实现滚屏交互<br>1.实现导航tab切换</li>
</ol>
<p>我们定义两个变量分别存放导航索引项和每页屏幕的dom集合。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 存放所有屏nodelist</span></div><div class="line"><span class="keyword">var</span> screens = <span class="literal">null</span>;</div><div class="line"><span class="comment">// 导航项nodeList</span></div><div class="line"><span class="keyword">var</span> navs = <span class="literal">null</span>;</div></pre></td></tr></table></figure>
<p>在页面dom就绪时候分别获取页面的集合对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// dom就绪</span></div><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// 获取屏幕nodelist</span></div><div class="line">    screens = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.stage'</span>);</div><div class="line">    <span class="comment">// 获取导航nodelist</span></div><div class="line">    navs = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.slide-nav a'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这是我们需要通过鼠标点击页面右侧的导航小圆点来进行屏幕切换。由于我们已经写好css3动画和样式，只需给当前页（屏幕）添加类名active而其他页需要去掉active这个类。</p>
<p>那我们来简单的实现一个addClass和removeClass的函数（被jquery毒害的很深）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">/* 工具类 */</div><div class="line">var util = &#123;</div><div class="line">    /* 添加类名 */</div><div class="line">    addClass: <span class="keyword">function</span>(obj, cls)&#123;</div><div class="line">        obj.className = obj.className.indexOf(cls) &gt; -1 ? obj.className : obj.className+<span class="string">' '</span>+cls;</div><div class="line">    &#125;,</div><div class="line">    /* 删除类名 */</div><div class="line">    removeClass: <span class="keyword">function</span>(obj, cls)&#123;</div><div class="line">        obj.className = obj.className.replace(cls, <span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">现在通过循环导航项nodeList来绑定点击事件，通过我们在html中给定的rel值作为当前页的索引</div><div class="line"></div><div class="line">/* 导航点击切换 */</div><div class="line"><span class="keyword">for</span>(var i = 0; i &lt; navs.length; i++)&#123;</div><div class="line">    navs[i].onclick = <span class="keyword">function</span>(event)&#123;</div><div class="line">        <span class="keyword">if</span>(this.className.indexOf(<span class="string">'on'</span>) === -1)&#123;</div><div class="line">            pn = parseInt(this.getAttribute(<span class="string">'rel'</span>) || pn);</div><div class="line">            //changeNav();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        event.preventDefault();</div><div class="line">        <span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体查看源码</p>
<p><a href="http://ginosin.esy.es/fullscreen/example-2.html" target="_blank" rel="external">http://ginosin.esy.es/fullscreen/example-2.html</a></p>
<ol>
<li>实现鼠标滚动轮滑切换</li>
</ol>
<p>鼠标轮滑事件的监听</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// FF13- 鼠标轮滑事件监听</div><div class="line">document.addEventListener(<span class="string">'DOMMouseScroll'</span>, scrollFn, <span class="literal">false</span>);</div><div class="line">// 轮滑事件监听</div><div class="line">window.onmousewheel = document.onmousewheel = scrollFn;</div><div class="line"></div><div class="line"></div><div class="line">// 滚动函数，鼠标轮滑滑动</div><div class="line">    var scrollFn = <span class="keyword">function</span>(event)&#123;</div><div class="line">        var event = event || window.event;</div><div class="line">        <span class="keyword">if</span>(!playing)&#123; // 不在动画过度</div><div class="line">            <span class="keyword">if</span>(event.wheelDelta &lt; 0)&#123;  // 向下滑动，负值</div><div class="line">                // 向下</div><div class="line">                motion(<span class="literal">true</span>)</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                //向上</div><div class="line">                motion(<span class="literal">false</span>)</div><div class="line">            &#125;                </div><div class="line">        &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<p>每次滚动我们需要等待动画完成后才能进行下一屏。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 设置锁屏</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">playingdelay</span></span>()&#123;</div><div class="line">    playing = <span class="literal">true</span>;</div><div class="line">    // 间隔playingduration秒后才能执行下一个动作</div><div class="line">    <span class="built_in">set</span>Timeout(<span class="function"><span class="title">function</span></span>()&#123; playing = <span class="literal">false</span>; &#125;, playingduration)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后我们要添加键盘上的上下左右和空格键也能实现屏幕的切换</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 键盘上下左右，空格键控制</div><div class="line">document.onkeydown = <span class="keyword">function</span>(event)&#123;</div><div class="line">    var event = event || window.event;</div><div class="line">    var c = event.keyCode;</div><div class="line">    <span class="keyword">if</span>(c == 40 || c == 32 || c == 39)&#123;</div><div class="line">        motion(<span class="literal">true</span>)</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c == 38 || c == 37)&#123;</div><div class="line">        motion(<span class="literal">false</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终实现了我们要的效果：</p>
<p><a href="http://ginosin.esy.es/fullscreen/" target="_blank" rel="external">http://ginosin.esy.es/fullscreen/</a></p>
<p>其中鼠标轮滑代码借鉴了</p>
<p><a href="http://browser.qq.com/" target="_blank" rel="external">http://browser.qq.com/</a></p>
<p>关于Fullpage.js插件<br>想要更强大的功能，我们必须上开源的插件fullpage.js</p>
<p>具体查看插件的案例.</p>
<p>[<a href="http://alvarotrigo.com/fullPage/examples/apple.html)(http://alvarotrigo.com/fullPage/examples/apple.html" target="_blank" rel="external">http://alvarotrigo.com/fullPage/examples/apple.html)(http://alvarotrigo.com/fullPage/examples/apple.html</a>)</p>
<p>以前公司最近弄的一个专题，也是我现在想尝试做一个的念头。</p>
<p><a href="http://www.yiihuu.com/event/3year/" target="_blank" rel="external">http://www.yiihuu.com/event/3year/</a></p>
<p>好了回到正题。我们用fullpage.js怎么实现上面那个例子呢。</p>
<p>先看html结构</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;div id=<span class="string">"fullpage"</span>&gt;</div><div class="line">    &lt;div class=<span class="string">"section"</span> id=<span class="string">"section1"</span>&gt;</div><div class="line">        &lt;p class=<span class="string">"pc"</span>&gt;&lt;/p&gt;</div><div class="line">        &lt;p class=<span class="string">"phone"</span>&gt;&lt;/p&gt;</div><div class="line">        &lt;p class=<span class="string">"pad"</span>&gt;&lt;/p&gt;</div><div class="line">        &lt;p class=<span class="string">"text1"</span>&gt;麦克普肉 &lt;/p&gt;</div><div class="line">        &lt;p class=<span class="string">"text2"</span>&gt;艾凤五爱斯  &lt;/p&gt;</div><div class="line">        &lt;p class=<span class="string">"text3"</span>&gt;牛    艾派得 &lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=<span class="string">"section"</span> id=<span class="string">"section2"</span>&gt;</div><div class="line">        &lt;div class=<span class="string">"pao"</span>&gt;&lt;/div&gt;</div><div class="line">        &lt;p class=<span class="string">"book"</span>&gt;&lt;/p&gt;</div><div class="line">        &lt;p class=<span class="string">"p1"</span>&gt;&lt;/p&gt;</div><div class="line">        &lt;p class=<span class="string">"p2"</span>&gt;&lt;/p&gt;</div><div class="line">        &lt;p class=<span class="string">"nav"</span>&gt;&lt;/p&gt;</div><div class="line">        &lt;p class=<span class="string">"text4"</span>&gt;欲练神功&lt;br/&gt;无需自X&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=<span class="string">"section"</span> id=<span class="string">"section3"</span>&gt;</div><div class="line">        &lt;div class=<span class="string">"mac"</span>&gt;</div><div class="line">            &lt;div class=<span class="string">"triangle"</span>&gt;&lt;/div&gt;</div><div class="line">            &lt;div class=<span class="string">"circle"</span>&gt;&lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;p class=<span class="string">"text5"</span>&gt;热吗？&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>无非是给每一屏dom元素加上section类，而且是不需要导航</p>
<p>还是原来的样式只需要稍稍改动一下。</p>
<p>那么JS是怎样写的呢？登登灯~</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    $(<span class="string">'.section'</span>).eq(0).removeClass(<span class="string">'active'</span>).addClass(<span class="string">'active'</span>);</div><div class="line">    $(<span class="string">'#fullpage'</span>).fullpage(&#123;</div><div class="line">        sectionsColor: [<span class="string">'#2F65C0'</span>, <span class="string">'#9253B2'</span>, <span class="string">'#0C86D3'</span>],</div><div class="line">        navigation: <span class="literal">true</span>,</div><div class="line">        navigationTooltips: [<span class="string">'移动生活'</span>, <span class="string">'传统书籍'</span>, <span class="string">'电脑改变生活'</span>],</div><div class="line">        loopBottom: <span class="literal">true</span>,</div><div class="line">        loopTop: <span class="literal">true</span>,</div><div class="line">        css3: <span class="literal">true</span></div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>是不是简单爆了！</p>
<p>别忘了要引入多个js文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"http://cdn.staticfile.org/jquery/1.11.1/jquery.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script src=<span class="string">"fullpage/jquery.easings.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script src=<span class="string">"fullpage/jquery.fullPage.min.js"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>好了我们看一下效果，看看有什么区别</p>
<p><a href="http://ginosin.esy.es/fullscreen/fullpage.html" target="_blank" rel="external">http://ginosin.esy.es/fullscreen/fullpage.html</a></p>
<p>关于fullpage.js的配置，详看</p>
<p><a href="https://github.com/alvarotrigo/fullPage.js#options" target="_blank" rel="external">https://github.com/alvarotrigo/fullPage.js#options</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;FullPage-js尝试&quot;&gt;&lt;a href=&quot;#FullPage-js尝试&quot; class=&quot;headerlink&quot; title=&quot;FullPage.js尝试&quot;&gt;&lt;/a&gt;FullPage.js尝试&lt;/h1&gt;&lt;p&gt;我们经常会经常看到这样的产品页&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.mi.com/shouhuan&quot;&gt;http://www.mi.com/shouhuan&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;是不是觉得很高端大气上档次&lt;/p&gt;
&lt;p&gt;那我们这样实现呢？&lt;/p&gt;
&lt;p&gt;首先我们来做一个没有插件版的Fullscreen，使用原始的javascript,css3来实现。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://tomieric.github.io/categories/JavaScript/"/>
    
    
      <category term="-jquery -javascript -插件" scheme="http://tomieric.github.io/tags/jquery-javascript-%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Gulp.js构建工具入门</title>
    <link href="http://tomieric.github.io/2014/08/20/gulp/"/>
    <id>http://tomieric.github.io/2014/08/20/gulp/</id>
    <published>2014-08-19T16:00:00.000Z</published>
    <updated>2016-09-04T05:42:36.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="http://gulpjs.com/" target="_blank" rel="external">gulp官网</a></p>
</blockquote>
<p><strong>基本入门</strong></p>
<ol>
<li>全局安装<code>gulp.js</code></li>
</ol>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> -g gulp</div></pre></td></tr></table></figure>
<a id="more"></a>
<ol>
<li>为项目目录安装<code>gulp.js</code>库文件</li>
</ol>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#cd c:<span class="comment">//myproject/demo1</span></span></div><div class="line">npm install --<span class="keyword">save</span>-dev gulp</div></pre></td></tr></table></figure>
<ol>
<li>在项目根目录创建<code>gulpfile.js</code>文件并写入以下模板。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">// code</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ol>
<li>运行<code>gulp</code>任务。</li>
</ol>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">		gulp</div><div class="line"></div><div class="line">```    </div><div class="line"></div><div class="line">基本入门就<span class="number">4</span>步可以完成，比起`grunt`各种配置简单许多。</div><div class="line"></div><div class="line">##Gulp.js进阶 ##</div></pre></td></tr></table></figure>
<pre><code>var gulp = require(&apos;gulp&apos;);

/**
# 依赖插件可以在package.json中配置
# npm install安装插件
**/
var contact = require(&apos;gulp-concat&apos;);
var uglify = require(&apos;gulp-uglify&apos;);
var sourcemaps = require(&apos;gulp-sourcemaps&apos;);
var imagemin = require(&apos;gulp-imagemin&apos;)
//var del = require(&apos;del&apos;);

var paths = {
    scripts: &apos;static/js/**/*.js&apos;,
    images: &apos;static/images/**/*&apos;
};

// 清空build目录文件
//# npm install --save-dev gulp-clean
gulp.task(&apos;clean&apos;, function(cb){
    //del([&apos;build&apos;], cb); #del不存在该模块，官方api居然有这句具体不知道怎么来
    cb();
});

// 处理js文件
//# npm install --save-dev gulp-sourcemaps
//# npm install --save-dev gulp-uglify
gulp.task(&apos;scripts&apos;, [&apos;clean&apos;], function(){
    return gulp.src(paths.scripts)
                .pipe(sourcemaps.init())
                .pipe(uglify())
                .pipe(sourcemaps.write(&apos;build/maps&apos;))
                .pipe(gulp.dest(&apos;build/js&apos;));
});

// 复制图片
//# npm install --save-dev gulp-images
gulp.task(&apos;images&apos;, [&apos;clean&apos;], function(){
    return gulp.src(paths.images)
                .pipe(imagemin({optimizationLevel: 5}))
                .pipe(gulp.dest(&apos;build/images&apos;));
});

// 文件监听
gulp.task(&apos;watch&apos;, function(){
    gulp.watch(paths.scripts, [&apos;scripts&apos;]);
    gulp.watch(paths.images, [&apos;images&apos;]);
});

// 配置默认任务，执行[&apos;watch&apos;, &apos;scripts&apos;, &apos;images&apos;]
gulp.task(&apos;default&apos;, [&apos;watch&apos;, &apos;scripts&apos;, &apos;images&apos;]);
</code></pre><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="vala"><span class="meta">##模板一</span></span></div></pre></td></tr></table></figure>
<pre><code>/**
 * 构建环境
 */

var gulp = require(&apos;gulp&apos;)

var concat = require(&apos;gulp-concat&apos;),
    uglify = require(&apos;gulp-uglify&apos;),
    imagemin = require(&apos;gulp-imagemin&apos;),
    less = require(&apos;gulp-less&apos;),
    minifycss = require(&apos;gulp-minify-css&apos;),
    rename = require(&apos;gulp-rename&apos;),
    livereload = require(&apos;gulp-livereload&apos;),
    autoprefixer = require(&apos;gulp-autoprefixer&apos;),
    cache = require(&apos;gulp-cache&apos;),
    notify = require(&apos;gulp-notify&apos;),
    connect = require(&apos;gulp-connect&apos;),
    del = require(&apos;del&apos;);

var paths = {
    styles: &apos;src/css/**/*.css&apos;,
    less: &apos;src/less/**/*.less&apos;,
    scripts: [&apos;src/js/jquery.js&apos;,&apos;src/js/common/**/*.js&apos;],
    images: &apos;src/images/**/*&apos;,
    gallery: &apos;src/gallery/**/*&apos;,
    index: [&apos;src/gallery/jquery.bxslider/jquery.bxslider.min.js&apos;, &apos;src/js/app/index.js&apos;]
};

gulp.task(&apos;scripts&apos;, function(){
    return gulp.src(paths.scripts)
                .pipe(concat(&apos;main.js&apos;))
                .pipe(gulp.dest(&apos;dist/js&apos;))
                //.pipe(rename({suffix: &apos;.min&apos;}))
                .pipe(uglify())
                .pipe(gulp.dest(&apos;dist/js&apos;))
                .pipe(notify(&apos;js任务运行完成&apos;))
});

gulp.task(&apos;images&apos;, function(){
    return gulp.src(paths.images)
                .pipe(cache(imagemin({ optimizationLevel: 5, progressive: true, interlaced: true })))
                .pipe(gulp.dest(&apos;dist/images&apos;))
                //.pipe(notify(&apos;图片压缩完成&apos;))
})

gulp.task(&apos;styles&apos;, function(cb){
    return gulp.src(&apos;src/less/main.less&apos;)
                .pipe(less())
                .pipe(autoprefixer(&apos;last 2 version&apos;, &apos;safari 5&apos;, &apos;ie 8&apos;, &apos;ie 9&apos;, &apos;opera 12.1&apos;, &apos;ios 6&apos;, &apos;android 4&apos;))
                .pipe(gulp.dest(&apos;src/css&apos;))
                .pipe(notify(&apos;less样式文件完成&apos;));
})

gulp.task(&apos;concat&apos;, [&apos;styles&apos;], function(){
    return gulp.src(paths.styles)
                .pipe(concat(&apos;main.css&apos;))
                .pipe(gulp.dest(&apos;dist/css&apos;))
                //.pipe(rename({suffix: &apos;.min&apos;}))
                .pipe(minifycss())
                .pipe(gulp.dest(&apos;dist/css&apos;))
                .pipe(notify(&apos;样式文件完成&apos;))
})

// gallery 插件
/*gulp.task(&apos;copy&apos;, function(){
    return gulp.src(paths.gallery)
                .pipe(gulp.dest(&apos;dist/gallery&apos;));
});*/

gulp.task(&apos;clean&apos;, function(cb){
    del([&apos;dist/js&apos;, &apos;dist/images&apos;, &apos;dist/css&apos;], cb);
})

gulp.task(&apos;html&apos;, function(){
    return gulp.src(&apos;*.html&apos;)
                .pipe(connect.reload());
})

gulp.task(&apos;connect&apos;, function(){
    connect.server({
        root: &apos;../ghlaw&apos;,
        livereload: true
    });
})

/*
* 首页
 */
gulp.task(&apos;index&apos;, function(){
    return gulp.src(paths.index)
                .pipe(concat(&apos;index.js&apos;))
                .pipe(gulp.dest(&apos;dist/js&apos;))
                //.pipe(rename({suffix: &apos;.min&apos;}))
                .pipe(uglify())
                .pipe(gulp.dest(&apos;dist/js&apos;))
                .pipe(notify(&apos;首页js任务运行完成&apos;))
});

gulp.task(&apos;watch&apos;, function(){

    gulp.watch(paths.scripts, [&apos;scripts&apos;])
    gulp.watch(paths.images, [&apos;images&apos;])
    gulp.watch(paths.less, [&apos;concat&apos;])
    //gulp.watch(paths.gallery, [&apos;copy&apos;])
    gulp.watch(paths.index, [&apos;index&apos;])

    livereload.listen()
    gulp.watch([&apos;/dist/**&apos;]).on(&apos;change&apos;, livereload.changed)
    gulp.watch([&apos;**/*.html&apos;], [&apos;html&apos;])
})

gulp.task(&apos;default&apos;, [&apos;clean&apos;], function(){
    gulp.start([&apos;connect&apos;,&apos;watch&apos;, &apos;scripts&apos;, &apos;images&apos;, &apos;concat&apos;, &apos;index&apos;]);
});
</code></pre><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">##模板二</span></div><div class="line"></div><div class="line">`<span class="javascript"></span>``<span class="javascript"> javascript</span></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 构建环境</div><div class="line">	 * by tomieric</div><div class="line">	 * gulpfile.js</div><div class="line">	 */</div><div class="line"></div><div class="line">	<span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</div><div class="line"></div><div class="line">	<span class="keyword">var</span> useref = <span class="built_in">require</span>(<span class="string">'gulp-useref'</span>)</div><div class="line">	<span class="keyword">var</span> gulpif = <span class="built_in">require</span>(<span class="string">'gulp-if'</span>)</div><div class="line">	<span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>)</div><div class="line">	<span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>)</div><div class="line">	<span class="keyword">var</span> notify = <span class="built_in">require</span>(<span class="string">'gulp-notify'</span>)</div><div class="line">	<span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>)</div><div class="line">	<span class="keyword">var</span> cache = <span class="built_in">require</span>(<span class="string">'gulp-cache'</span>)</div><div class="line">	<span class="keyword">var</span> rev = <span class="built_in">require</span>(<span class="string">'gulp-rev'</span>)</div><div class="line">	<span class="keyword">var</span> del = <span class="built_in">require</span>(<span class="string">'del'</span>)</div><div class="line"></div><div class="line">	gulp.task(<span class="string">'copyimage'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>)</span>&#123;</div><div class="line">		<span class="comment">//return</span></div><div class="line">		gulp.src(<span class="string">'./images/**/*'</span>)</div><div class="line">					.pipe(cache(imagemin(&#123; optimizationLevel: <span class="number">5</span>, progressive: <span class="literal">true</span>, interlaced: <span class="literal">true</span> &#125;)))</div><div class="line">					.pipe(gulp.dest(<span class="string">'./dist/images'</span>))</div><div class="line">		cb()</div><div class="line">	&#125;)</div><div class="line"></div><div class="line">	gulp.task(<span class="string">'app'</span>, [<span class="string">'clean'</span>, <span class="string">'copyimage'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> assets = useref.assets()</div><div class="line"></div><div class="line">		<span class="keyword">return</span> gulp.src(<span class="string">'./index.html'</span>)</div><div class="line">				.pipe(assets)</div><div class="line">				.pipe(gulpif(<span class="string">'*.js'</span>, uglify()))</div><div class="line">				.pipe(gulpif(<span class="string">'*.css'</span>, minifycss()))</div><div class="line">				.pipe(assets.restore())</div><div class="line">				.pipe(useref())</div><div class="line">				.pipe(gulp.dest(<span class="string">'dist'</span>))</div><div class="line">				.pipe(notify(<span class="string">'构建完成'</span>))</div><div class="line">	&#125;)</div><div class="line"></div><div class="line">	gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>)</span>&#123;</div><div class="line">		del([<span class="string">'./dist'</span>], cb)</div><div class="line">	&#125;)</div><div class="line"></div><div class="line">	<span class="comment">/* watch */</span></div><div class="line">	gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		gulp.watch(<span class="string">'./js/*.js'</span>, [<span class="string">'app'</span>])</div><div class="line">		gulp.watch(<span class="string">'./css/style.css'</span>, [<span class="string">'app'</span>])</div><div class="line">	&#125;)</div><div class="line"></div><div class="line">	<span class="comment">/* task */</span></div><div class="line">	gulp.task(<span class="string">'default'</span>, [<span class="string">'clean'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		gulp.start([<span class="string">'watch'</span>, <span class="string">'app'</span>]);</div><div class="line">	&#125;)</div></pre></td></tr></table></figure>
<p>html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">	<span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	    <span class="comment">&lt;!-- build:css css/combined.css --&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"css/one.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"css/two.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line">	    <span class="comment">&lt;!-- endbuild --&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	    <span class="comment">&lt;!-- build:js scripts/combined.js --&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"scripts/one.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"scripts/two.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	    <span class="comment">&lt;!-- endbuild --&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line">result</div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/combined.css"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"scripts/combined.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://github.com/nimojs/gulp-book" target="_blank" rel="external">gulp-book中文</a></p>
<p><a href="https://github.com/yeol/blog/blob/master/20140828_building_with_gulp.md" target="_blank" rel="external">Building With Gulp中文版</a></p>
<p><a href="http://rookieone.gitbooks.io/learning-gulp/index.html" target="_blank" rel="external">Learning Gulp</a></p>
<p><a href="http://davinov.gitbooks.io/gulp-book/" target="_blank" rel="external">gulp-book</a></p>
<p><a href="http://blog.segmentfault.com/nightire/1190000000435599" target="_blank" rel="external">“流式”前端构建工具——gulp.js 简介</a></p>
<p><a href="http://v.youku.com/v_show/id_XNzUyNzc5Nzky.html" target="_blank" rel="external">gulp视频教程之一：gulp是什么gulp能做什么</a></p>
<p><a href="http://markpop.github.io/2014/09/17/Gulp%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/" target="_blank" rel="external">Gulp入门教程</a></p>
<p><a href="http://colobu.com/2014/11/17/gulp-plugins-introduction/#gulp-usemin" target="_blank" rel="external">gulp plugins 插件介绍</a></p>
<p><a href="http://csspod.com/advanced-tips-for-using-gulp-js/" target="_blank" rel="external">gulp高级进阶</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://gulpjs.com/&quot;&gt;gulp官网&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;基本入门&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;全局安装&lt;code&gt;gulp.js&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; -g gulp&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端构建" scheme="http://tomieric.github.io/categories/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA/"/>
    
    
      <category term="-前端构建 -gulp" scheme="http://tomieric.github.io/tags/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA-gulp/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript正则表达式</title>
    <link href="http://tomieric.github.io/2014/08/20/javascript-regExp/"/>
    <id>http://tomieric.github.io/2014/08/20/javascript-regExp/</id>
    <published>2014-08-19T16:00:00.000Z</published>
    <updated>2016-09-04T05:42:36.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt -->
<p>创建一个正则表达式</p>
<p>第一种方法：</p>
<pre><code>var reg = /pattern/;
</code></pre><p>第二种方法：</p>
<pre><code>var reg = new  RegExp(&apos;pattern&apos;);
</code></pre><p>正则表达式的exec方法简介</p>
<p>语法：</p>
<pre><code>reg.exec(str);
</code></pre><p>其中str为要执行正则表达式的目标字符串。</p>
<p>例如：</p>
<pre><code>&lt;script  type=&quot;text/javascript&quot;&gt;
    var reg = /test/;
    var str = &apos;testString&apos;;
    var result =  reg.exec(str);
    alert(result);
&lt;/script&gt;
</code></pre><p>将会输出<code>test</code>，因为正则表达式<code>reg</code>会匹配<code>str(‘testString’)</code>中的<code>’test’</code>子字符串，并且将其返回。</p>
<p>我们使用下面的函数来做匹配正则的练习：</p>
<pre><code>function  execReg(reg,str){   
    var result =  reg.exec(str);  
    alert(result);  
}
</code></pre><p>函数接受一个正则表达式参数<code>reg</code>和一个目标字符串参数<code>str</code>，执行之后会<code>alert</code>出正则表达式与字符串的匹配结果。</p>
<p>用这个函数测试上面的例子就是：</p>
<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;
        function execReg(reg, str) {
                var result = reg.exec(str);
                alert(result);
        }
        var reg = /test/;
        var str = &apos;testString&apos;;
        execReg(reg, str);
&lt;/script&gt;
</code></pre><p>上面的例子用正则里的<code>test</code>去匹配字符串里的<code>test</code>，实在是很无聊，同样的任务用<code>indexOf</code>方法就可以完成了。用正则，自然是要完成更强大的功能：</p>
<p><strong>一片两片三四片，落尽正则全不见</strong></p>
<p>上面的小标题翻译成正则就是<code>{1},{2},{3,4},{1,}</code>。</p>
<p><code>c{n}</code></p>
<p><code>{1}</code>表示一个的意思。</p>
<p><code>/c{1}/</code>只能匹配一个<code>c</code>。</p>
<p><code>/c{2}/</code>则会匹配两个连续的<code>c</code>。</p>
<p>以此类推,</p>
<p><code>/c{n}/</code>则会匹配<code>n</code>个连续的<code>c</code>。</p>
<p>看下面的例子：</p>
<pre><code>reg = /c{1}/;
str = &apos;cainiao&apos;;
execReg(reg, str);
</code></pre><p>返回结果<code>c</code></p>
<pre><code>reg = /c{2}/;
str = &apos;cainiao&apos;;
execReg(reg, str);
</code></pre><p>返回结果<code>null</code>，表示没有匹配成功。</p>
<pre><code>reg = /c{2}/;
str = &apos;ccVC果冻爽&apos;;
execReg(reg, str);
</code></pre><p>返回结果<code>cc</code>。</p>
<p><code>c{m,n}</code></p>
<p><code>c{3,4}</code>的意思是，连续的3个<code>c</code>或者4个<code>c</code>。</p>
<p>例如</p>
<pre><code>reg = /c{3,4}/;
str = &apos;ccVC果冻爽&apos;;
execReg(reg, str);
</code></pre><p>返回结果<code>null</code>，表示没有匹配成功。</p>
<pre><code>reg = /c{3,4}/;
str = &apos;cccTest&apos;;
execReg(reg, str);
</code></pre><p>结果返回<code>ccc</code>。</p>
<pre><code>reg = /c{3,4}/;
str = &apos;ccccTest&apos;;
execReg(reg, str);
</code></pre><p>结果返回<code>cccc</code>，这表明正则会尽量多匹配，可3可4的时候它会选择多匹配一个。</p>
<pre><code>reg = /c{3,4}/;
str = &apos;cccccTest&apos;;
execReg(reg, str);
</code></pre><p>仍然只匹配4个<code>c</code>。</p>
<p>由以上例子可以推断出，<code>c{m,n}</code>表示<code>m</code>个到<code>n</code>个<code>c</code>，且<code>m</code>小于等于<code>n</code>。</p>
<p><code>c{n,}</code>,<code>c{1,}</code>表示1个以上的c。</p>
<p>例如：</p>
<pre><code>reg = /c{1,}/;
str = &apos;cainiao&apos;;
execReg(reg, str);
</code></pre><p>结果返回<code>c</code>。</p>
<pre><code>reg = /c{1,}/;
str = &apos;cccccTest&apos;;
execReg(reg, str);
</code></pre><p>返回ccccc，再次说明了正则表达式会尽量多地匹配。</p>
<pre><code>reg = /c{2,}/;
str = &apos;cainiao&apos;;
execReg(reg, str);
</code></pre><p>结果返回<code>null</code>，<code>c{2,}</code>表示<code>2</code>个以上的<code>c</code>，而<code>cainiao</code>中只有1个<code>c</code>。</p>
<p>由以上例子可知，<code>c{n,}</code>表示最少<code>n</code>个<code>c</code>，最多则不限个数。</p>
<pre><code>*,+,?
</code></pre><p><code>*</code>表示<code>0</code>次或者多次，等同于<code>{0,}</code>，即</p>
<p><code>c*</code> 和 <code>c{0,}</code> 是一个意思。</p>
<p><code>+</code>表示一次或者多次，等同于<code>{1,}</code>，即</p>
<p><code>c+</code> 和 <code>c{1,}</code> 是一个意思。</p>
<p>最后，<code>?</code>表示<code>0</code>次或者<code>1</code>次，等同于<code>{0,1}</code>，即</p>
<p><code>c?</code> 和 <code>c{0,1}</code> 是一个意思。</p>
<p>贪心与非贪心</p>
<p>人都是贪婪的，正则也是如此。我们在例子<code>reg = /c{3,4}/;str=&#39;ccccTest&#39;;</code>的例子中已经看到了，能匹配四个的时候，正则绝对不会去匹配三个。上面所介绍的所有的正则都是这样，只要在合法的情况下，它们会尽量多去匹配字符，这就叫做贪心模式。</p>
<p>如果我们希望正则尽量少地匹配字符，那么就可以在表示数字的符号后面加上一个?。组成如下的形式：</p>
<pre><code>{n,}?, *?, +?, ??, {m,n}?
</code></pre><p>同样来看一个例子：</p>
<pre><code>reg = /c{1,}?/;
str = &apos;ccccc&apos;;
execReg(reg, str);
</code></pre><p>返回的结果只有1个<code>c</code>，尽管有5个<code>c</code>可以匹配，但是由于正则表达式是非贪心模式，所以只会匹配一个。</p>
<pre><code>/^开头,结尾$/
</code></pre><p><code>^</code>表示只匹配字符串的开头。看下面的例子：</p>
<pre><code>reg = /^c/;
str = &apos;维生素c&apos;;
execReg(reg, str);
</code></pre><p>结果为<code>null</code>，因为字符串‘维生素c’的开头并不是<code>c</code>，所以匹配失败。</p>
<pre><code>reg = /^c/;
str = &apos;cainiao&apos;;
execReg(reg, str);
</code></pre><p>这次则返回<code>c</code>，匹配成功，因为<code>cainiao</code>恰恰是以<code>c</code>开头的。</p>
<p>与<code>^</code>相反，<code>$</code>则只匹配字符串结尾的字符，同样，看例子：</p>
<pre><code>reg = /c$/;
str = &apos;cainiao&apos;;
execReg(reg, str);
</code></pre><p>返回<code>null</code>，表示正则表达式没能在字符串的结尾找到<code>c</code>这个字符。</p>
<pre><code>reg = /c$/;
str = &apos;维生素c&apos;;
execReg(reg, str);
</code></pre><p>这次返回的结果是<code>c</code>，表明匹配成功。</p>
<p><code>点’.’</code>,<code>‘.’</code>会匹配字符串中除了换行符<code>\n</code>之外的所有字符，例如</p>
<pre><code>reg = /./;
str = &apos;cainiao&apos;;
execReg(reg, str);
</code></pre><p>结果显示，正则匹配到了字符<code>c</code>。</p>
<pre><code>reg = /./;
str = &apos;blueidea&apos;;
execReg(reg, str);
</code></pre><p>这次是<code>b</code>。</p>
<pre><code>reg = /.+/;
str = &apos;blueidea——经典论坛  好_。&apos;;
execReg(reg, str);
</code></pre><p>结果是<code>“blueidea——经典论坛 好_。“</code>也就是说所有的字符都被匹配掉了，包括一个空格，一个下滑线，和一个破折号。</p>
<pre><code>reg = /.+/;
reg = /.+/;
str = &apos;bbs.blueidea.com&apos;;
execReg(reg, str);
</code></pre><p>同样，直接返回整个字符串——<code>bbs.blueidea.com</code>，可见<code>”.”</code>也匹配<code>”.”</code>本身。</p>
<pre><code>reg = /^./;
str = &apos;\ncainiao&apos;;
execReg(reg, str);
</code></pre><p>结果是<code>null</code>，终于失败了，正则要求字符串的第一个字符不是换行，但是恰恰字符是以<code>\n</code>开始的。</p>
<p>二选一，正则表达式中的或，<code>“|“</code></p>
<p><code>b|c</code>表示，匹配<code>b</code>或者<code>c</code>。</p>
<p>例如：</p>
<pre><code>reg = /b|c/;
str = &apos;blueidea&apos;;
execReg(reg, str);
</code></pre><p>结果是<code>b</code>。</p>
<pre><code>reg = /b|c/;
str = &apos;cainiao&apos;;
execReg(reg, str);
</code></pre><p>结果是<code>c</code>。</p>
<pre><code>reg = /^b|c.+/;
str = &apos;cainiao&apos;;
execReg(reg, str);
</code></pre><p>匹配掉整个<code>cainiao</code>。</p>
<pre><code>reg = /^b|c.+/;
str = &apos;bbs.blueidea.com&apos;;
execReg(reg, str);
</code></pre><p>结果只有一个<code>b</code>，而不是整个字符串。因为上面正则表达式的意思是，匹配开头的<code>b</code>或者是<code>c.+</code>。</p>
<p>括号</p>
<pre><code>reg = /^(b|c).+/;
str = &apos;bbs.blueidea.com&apos;;
execReg(reg, str);
</code></pre><p>这次的结果是整个串<code>bbs.blueidea.com</code>，加上上面的括号后，这个正则的意思是，如果字符串的开头是<code>b</code>或者<code>c</code>，那么匹配开头的b或者c以及其后的所有的非换行字符。</p>
<p>如果你也实验了的话，会发现返回的结果后面多出来一个<code>“,b“</code>，这是<code>()</code>内的<code>b|c</code>所匹配的内容。我们在正则表达式内括号里写的内容会被认为是子正则表达式，所匹配的结果也会被记录下来供后面使用。我们暂且不去理会这个特性。</p>
<pre><code>字符集合[abc]
</code></pre><p><code>[abc]</code>表示a或者b或者c中的任意一个字符。例如：</p>
<pre><code>reg = /^[abc]/;
str = &apos;bbs.blueidea.com&apos;;
execReg(reg, str);
</code></pre><p>返回结果是<code>b</code>。</p>
<pre><code>reg = /^[abc]/;
str = &apos;test&apos;;
execReg(reg, str);
</code></pre><p>这次的结果就是<code>null</code>了。</p>
<p>我们在字字符集合中使用如下的表示方式:<code>[a-z],[A-Z],[0-9]</code>，分别表示小写字母，大写字母，数字。例如：</p>
<pre><code>reg = /^[a-zA-Z][a-zA-Z0-9_]+/;
str = &apos;test&apos;;
execReg(reg, str);
</code></pre><p>结果是整个<code>test</code>，正则的意思是开头必须是英文字母，后面可以是英文字母或者数字以及下划线。</p>
<h2 id="反字符集合-abc"><a href="#反字符集合-abc" class="headerlink" title="反字符集合[^abc]"></a>反字符集合[^abc]</h2><p><code>^</code>在正则表达式开始部分的时候表示开头的意思，例如<code>/^c/</code>表示开头是<code>c</code>；但是在字符集和中，它表示的是类似<code>“非“</code>的意思，例如<code>[^abc]</code>就表示不能是<code>a</code>，<code>b</code>或者<code>c</code>中的任何一个。例如：</p>
<pre><code>reg = /[^abc]/;
str = &apos;blueidea&apos;;
execReg(reg, str);
</code></pre><p>返回的结果是<code>l</code>，因为它是第一个非<code>abc</code>的字符（即第一个<code>b</code>没有匹配）。同样：</p>
<pre><code>reg = /[^abc]/;
str = &apos;cainiao&apos;;
execReg(reg, str);
</code></pre><p>则返回<code>i</code>，前两个字符都是<code>[abc]</code>集合中的。</p>
<p>由此我们可知：<code>[^0-9]</code>表示非数字，<code>[^a-z]</code>表示非小写字母，一次类推。</p>
<p>##边界与非边界##</p>
<p><code>\b</code>表示的边界的意思，也就是说，只有字符串的开头和结尾才算数。例如<code>/\bc/</code>就表示字符串开始的<code>c</code>或者是结尾的<code>c</code>。看下面的例子：</p>
<pre><code>reg = /\bc/;
str = &apos;cainiao&apos;;
execReg(reg, str);
</code></pre><p>返回结果<code>c</code>。匹配到了左边界的<code>c</code>字符。</p>
<pre><code>reg = /\bc/;
str = &apos;维生素c&apos;;
execReg(reg, str);
</code></pre><p>仍然返回<code>c</code>，不过这次返回的是右侧边界的<code>c</code>。</p>
<pre><code>reg = /\bc/;
str = &apos;bcb&apos;;
execReg(reg, str);
</code></pre><p>这次匹配失败，因为<code>bcb</code>字符串中的<code>c</code>被夹在中间，既不在左边界也不再右边界。</p>
<p>与<code>\b</code>对应<code>\B</code>表示非边界。例如：</p>
<pre><code>reg = /\Bc/;
str = &apos;bcb&apos;;
execReg(reg, str);
</code></pre><p>这次会成功地匹配到<code>bcb</code>中的<code>c</code>，。然而</p>
<pre><code>reg = /\Bc/;
str = &apos;cainiao&apos;;
execReg(reg, str);
</code></pre><p>则会返回<code>null</code>。因为<code>\B</code>告诉正则，只匹配非边界的<code>c</code>。</p>
<p>##数字与非数字##</p>
<p><code>\d</code>表示数字的意思，相反，<code>\D</code>表示非数字。例如：</p>
<pre><code>reg = /\d/;
str = &apos;cainiao8&apos;;
execReg(reg, str);
</code></pre><p>返回的匹配结果为<code>8</code>，因为它是第一个数字字符。</p>
<pre><code>reg = /\D/;
str = &apos;cainiao8&apos;;
execReg(reg, str);
</code></pre><p>返回<code>c</code>，第一个非数字字符。</p>
<p>##空白##</p>
<p><code>\f</code>匹配换页符，<code>\n</code>匹配换行符，<code>\r</code>匹配回车，<code>\t</code>匹配制表符，<code>\v</code>匹配垂直制表符。</p>
<p><code>\s</code>匹配单个空格，等同于<code>[\f\n\r\t\v]</code>。例如：</p>
<pre><code>reg = /\s.+/;
str = &apos;This is a test  String.&apos;;
execReg(reg, str);
</code></pre><p>返回<code>“is a test String.”</code>，正则的意思是匹配第一个空格以及其后的所有非换行字符。</p>
<p>同样，<code>\S</code>表示非空格字符。</p>
<pre><code>reg = /\S+/;
str = &apos;This is a test  String.&apos;;
execReg(reg, str);
</code></pre><p>匹配结果为<code>This</code>，当遇到第一个空格之后，正则就停止匹配了。</p>
<p>单词字符</p>
<p><code>\w</code>表示单词字符，等同于字符集合<code>[a-zA-Z0-9_]</code>。例如：</p>
<pre><code>reg = /\w+/;
str = &apos;blueidea&apos;;
execReg(reg, str);
</code></pre><p>返回完整的<code>blueidea</code>字符串，因为所有字符都是单词字符。</p>
<pre><code>reg = /\w+/;
str = &apos;.className&apos;;
execReg(reg, str);
</code></pre><p>结果显示匹配了字符串中的<code>className</code>，只有第一个<code>“.”</code>——唯一的非单词字符没有匹配。</p>
<pre><code>reg = /\w+/;
str = &apos;中文如何？&apos;;
execReg(reg, str);
</code></pre><p>试图用单词字符去匹配中文自然行不通了，返回<code>null</code>。</p>
<p><code>\W</code>表示非单词字符，等效于<code>[^a-zA-Z0-9_]</code></p>
<pre><code>reg = /\W+/;
str = &apos;中文如何？&apos;;
execReg(reg, str);
</code></pre><p>返回完整的字符串，因为，无论是中文和“<code>？</code>”都算作是非单词字符。</p>
<p>##反向引用##</p>
<p>形式如下：<code>/(子正则表达式)\1/</code></p>
<p>依旧用例子来说明：</p>
<p>1.</p>
<pre><code>reg = /\w/;
str = &apos;blueidea&apos;;
execReg(reg, str);
</code></pre><p>返回<code>b</code>。</p>
<p>2.</p>
<pre><code>reg = /(\w)(\w)/;
str = &apos;blueidea&apos;;
execReg(reg, str);
</code></pre><p>返回<code>bl</code>,<code>b</code>,<code>l</code></p>
<p><code>bl</code>是整个正则匹配的内容，<code>b</code>是第一个括号里的子正则表达式匹配的内容，<code>l</code>是第二个括号匹配的内容。</p>
<p>3.</p>
<pre><code>reg = /(\w)\1/;
str = &apos;blueidea&apos;;
execReg(reg, str);
</code></pre><p>则会返回<code>null</code>。这里的“<code>\1</code>”就叫做反向引用，它表示的是第一个括号内的字正则表达式匹配的内容。在上面的例子中，第一个括号里的(<code>\w</code>)匹配了<code>b</code>，因此“<code>\1</code>”就同样表示<code>b</code>了，在余下的字符串里自然找不到<code>b</code>了。</p>
<p>与第二个例子对比就可以发现，“<code>\1</code>”是等同于“第1个括号匹配的内容”，而不是“第一个括号的内容”。</p>
<pre><code>reg = /(\w)\1/;
str = &apos;bbs.blueidea.com&apos;;
execReg(reg, str);
</code></pre><p>这个正则则会匹配到<code>bb</code>。</p>
<p>同样，前面有几个子正则表达式我们就可以使用几个反向引用。例如：</p>
<pre><code>reg = /(\w)(\w)\2\1/;
str = &apos;woow&apos;;
execReg(reg, str);
</code></pre><p>会匹配成功，因为第一个括号匹配到w，第二个括号匹配到<code>o</code>，而<code>\2\1</code>则表示<code>ow</code>，恰好匹配了字符串的最后两个字符。</p>
<p>##括号（2）##</p>
<p>前面我们曾经讨论过一次括号的问题，见下面这个例子：</p>
<pre><code>reg = /^(b|c).+/;
str = &apos;bbs.blueidea.com&apos;;
execReg(reg, str);
</code></pre><p>这个正则是为了实现只匹配以<code>b</code>或者<code>c</code>开头的字符串，一直匹配到换行字符，但是。上面我们已经看到了，可以使用“<code>\1</code>”来反向引用这个括号里的子正则表达式所匹配的内容。而且<code>exec</code>方法也会将这个字正则表达式的匹配结果保存到返回的结果中。</p>
<p>不记录子正则表达式的匹配结果</p>
<p>使用形如<code>(?:pattern)</code>的正则就可以避免保存括号内的匹配结果。例如：</p>
<pre><code>reg = /^(?:b|c).+/;
str = &apos;bbs.blueidea.com&apos;;
execReg(reg, str);
</code></pre><p>可以看到返回的结果不再包括那个括号内的字正则表达式多匹配的内容。</p>
<p>同理，反向引用也不好使了：</p>
<pre><code>reg = /^(b|c)\1/;
str = &apos;bbs.blueidea.com&apos;;
execReg(reg, str);
</code></pre><p>返回<code>bb</code>,<code>b</code>。<code>bb</code>是整个正则表达式匹配的内容，而b是第一个子正则表达式匹配的内容。</p>
<pre><code>reg = /^(?:b|c)\1/;
str = &apos;bbs.blueidea.com&apos;;
execReg(reg, str);
</code></pre><p>返回<code>null</code>。由于根本就没有记录括号内匹配的内容，自然没有办法反向引用了。</p>
<p>##正向预查##</p>
<p>形式：<code>(?=pattern)</code></p>
<p>所谓正向预查，意思就是：要匹配的字符串，后面必须紧跟着pattern！</p>
<p>我们知道正则表达式<code>/cainiao/</code>会匹配<code>cainiao</code>。同样，也会匹配<code>cainiao9</code>中的<code>cainiao</code>。但是我们可能希望，<code>cainiao</code>只能匹配<code>cainiao8</code>中的菜鸟。这时候就可以像下面这样写：<code>/cainiao(?=8)/</code>，看两个实例：</p>
<pre><code>reg = /cainiao(?=8)/;
str = &apos;cainiao9&apos;;
execReg(reg, str);
</code></pre><p>返回<code>null</code>。</p>
<pre><code>reg = /cainiao(?=8)/;
str = &apos;cainiao8&apos;;
execReg(reg, str);
</code></pre><p>匹配<code>cainiao</code>。</p>
<p>需要注意的是，括号里的内容并不参与真正的匹配，只是检查一下后面的字符是否符合要求而已，例如上面的正则，返回的是<code>cainiao</code>，而不是<code>cainiao8</code>。</p>
<p>再来看两个例子：</p>
<pre><code>reg = /blue(?=idea)/;
str = &apos;blueidea&apos;;
execReg(reg, str);
</code></pre><p>匹配到<code>blue</code>，而不是<code>blueidea</code>。</p>
<pre><code>reg = /blue(?=idea)/;
str = &apos;bluetooth&apos;;
execReg(reg, str);
</code></pre><p>返回<code>null</code>，因为<code>blue</code>后面不是<code>idea</code>。</p>
<pre><code>reg = /blue(?=idea)/;
str = &apos;bluetoothidea&apos;;
execReg(reg, str);
</code></pre><p>同样返回<code>null</code>。</p>
<p>##?!##</p>
<p>形式<code>(?!pattern)</code>和<code>?=</code>恰好相反，要求字符串的后面不能紧跟着某个<code>pattern</code>，还拿上面的例子：</p>
<pre><code>reg = /blue(?!idea)/;
str = &apos;blueidea&apos;;
execReg(reg, str);
</code></pre><p>返回<code>null</code>，因为正则要求，<code>blue</code>的后面不能是<code>idea</code>。</p>
<pre><code>reg = /blue(?!idea)/;
str = &apos;bluetooth&apos;;
execReg(reg, str);
</code></pre><p>则成功返回<code>blue</code>。</p>
<p>##匹配元字符##</p>
<p>首先要搞清楚什么是元字符呢？我们之前用过<code>*,+,?</code>之类的符号，它们在正则表达式中都有一定的特殊含义，类似这些有特殊功能的字符都叫做元字符。例如</p>
<pre><code>reg = /c*/;
</code></pre><p>表示有任意个<code>c</code>，但是如果我们真的想匹配’<code>c*</code>’这个字符串的时候怎么办呢？只要将*转义了就可以了，如下：</p>
<pre><code>reg = /c\*/;
str = &apos;c*&apos;;
execReg(reg, str);
</code></pre><p>返回匹配的字符串：<code>c*</code>。</p>
<p>同理，要匹配其他元字符，只要在前面加上一个“<code>\</code>”就可以了。</p>
<p>##正则表达式的修饰符##</p>
<p><strong>全局匹配，修饰符g</strong></p>
<p>形式：<code>/pattern/g</code></p>
<p>例子：<code>reg = /b/g;</code></p>
<p>后面再说这个<code>g</code>的作用。先看后面的两个修饰符。</p>
<p>不区分大小写，修饰符<code>i</code></p>
<p>形式：<code>/pattern/i</code></p>
<p>例子：</p>
<pre><code>var reg = /b/;
var str = &apos;BBS&apos;;
execReg(reg, str);
</code></pre><p>返回<code>null</code>，因为大小写不符合。</p>
<pre><code>var reg = /b/i;
var str = &apos;BBS&apos;;
execReg(reg, str);
</code></pre><p>匹配到<code>B</code>，这个就是<code>i</code>修饰符的作用了。</p>
<p>行首行尾，修饰符<code>m</code></p>
<p>形式：<code>/pattern/m</code></p>
<p><code>m</code>修饰符的作用是修改^和$在正则表达式中的作用，让它们分别表示行首和行尾。例如：</p>
<pre><code>var reg = /^b/;
var str = &apos;test\nbbs&apos;;
execReg(reg, str);
</code></pre><p>匹配失败，因为字符串的开头没有b字符。但是加上m修饰符之后：</p>
<pre><code>var reg = /^b/m;
var str = &apos;test\nbbs&apos;;
execReg(reg, str);
</code></pre><p>匹配到<code>b</code>，因为加了<code>m</code>修饰符之后，^已经表示行首，由于<code>bbs</code>在字符串第二行的行首，所以可以成功地匹配。</p>
<p>##exec方法详解##</p>
<p><code>exec</code>方法的返回值</p>
<p><code>exec</code>方法返回的其实并不是匹配结果字符串，而是一个对象，简单地修改一下<code>execReg</code>函数，来做一个实验就可以印证这一点：</p>
<pre><code>function  execReg(reg,str){   
    var result =  reg.exec(str);   
    alert(typeof result);  
}  
var reg = /b/;  
var  str=&apos;bbs.bblueidea.com&apos;;  
execReg(reg,str);
</code></pre><p>结果显示<code>result</code>的类型是<code>object</code>。而且是一个类似数组的对象。使用<code>for in</code>可以知道它的属性: <code>index input 0</code>。其中<code>index</code>是表示匹配在原字符串中的索引；而<code>input</code>则是表示输入的字符串；</p>
<p>至于<code>0</code>则是表示只有一个匹配结果，可以用下标0来引用这个匹配结果，这个数量可能改变。我们可以通过返回值的length属性来得知匹配结果的总数量。</p>
<p>根据以上对返回值的分析，修改execReg函数如下：</p>
<pre><code>function execReg(reg, str) {
    var result = reg.exec(str);
    document.write(&apos;index:&apos; + result.index + &apos;&lt;br  /&gt;&apos; + &apos;input:&apos; + result.input + &apos;&lt;br  /&gt;&apos;);
    for (i = 0; i &lt; result.length; i++) {
            document.write(&apos;result[&apos; + i + &apos;]:&apos; + result[i] + &apos;&lt;br  /&gt;&apos;)
    }
}
</code></pre><p>马上来实验一下：</p>
<pre><code>var reg = /\w/;
var str = &apos;bbs.bblueidea.com&apos;;
execReg(reg, str);
</code></pre><p>结果如下：</p>
<pre><code>index:0

input:bbs.bblueidea.com

result[0]:b
</code></pre><p>输入字符串为<code>bbs.bblueidea.com</code>；</p>
<p>匹配的<code>b</code>在原字符串的索引是<code>0</code>。</p>
<p>正则的匹配结果为一个，<code>b</code>；</p>
<pre><code>var reg = /(\w)(\w)(.+)/;
var str = &apos;bbs.bblueidea.com&apos;;
execReg(reg, str);
</code></pre><p>结果为：</p>
<pre><code>index:0
input:bbs.bblueidea.com
result[0]:bbs.bblueidea.com
result[1]:b
result[2]:b
result[3]:s.bblueidea.com
</code></pre><p>由上面两个例子可见，返回对象<code>[0]</code>就是整个正则表达式所匹配的内容。后续的元素则是各个子正则表达式的匹配内容。</p>
<p><code>exec</code>方法对正则表达式的更新</p>
<p><code>exec</code>方法在返回结果对象的同时，还可能会更新原来的正则表达式，这就要看正则表达式是否设置了g修饰符。先来看两个例子吧：</p>
<pre><code>var reg = /b/;
var str = &apos;bbs.blueidea.com&apos;;
execReg(reg, str);
execReg(reg, str);
</code></pre><p>结果如下：</p>
<pre><code>index:0
input:bbs.blueidea.com
result[0]:b
index:0
input:bbs.blueidea.com
result[0]:b
</code></pre><p>也就是说，两次匹配的结果完全一样，从索引可以看出来，匹配的都是字符串首的b字符。</p>
<p>下面看看设置了g的正则表达式表现如何：</p>
<pre><code>var reg = /b/g;
var str = &apos;bbs.blueidea.com&apos;;
execReg(reg, str);
execReg(reg, str);
</code></pre><p>结果如下：</p>
<pre><code>index:0
input:bbs.blueidea.com
result[0]:b
index:1
input:bbs.blueidea.com
result[0]:b
</code></pre><p>可以看得出来，第二次匹配的是字符串的字符串的第二个<code>b</code>。这也就是<code>g</code>修饰符的作用了，下面来看<code>exec</code>是如何区别对待<code>g</code>和非<code>g</code>正则表达式的。</p>
<p>如果正则表达式没有设置g，那么<code>exec</code>方法不会对正则表达式有任何的影响，如果设置了<code>g</code>，那么<code>exec</code>执行之后会更新正则表达式的<code>lastIndex</code>属性，表示本次匹配后，所匹配字符串的下一个字符的索引，下一次再用这个正则表达式匹配字符串的时候就会从上次的lastIndex属性开始匹配，也就是上面两个例子结果不同的原因了。</p>
<p><strong>test方法</strong></p>
<p>test方法仅仅检查是否能够匹配str，并且返回布尔值以表示是否成功。同样建立一个简单的测试函数：</p>
<pre><code>function testReg(reg, str) {
        alert(reg.test(str));
}
</code></pre><p>实例1</p>
<pre><code>var reg = /b/;
var str = &apos;bbs.blueidea.com&apos;;
testReg(reg, str);
</code></pre><p>成功，输出<code>true</code>。</p>
<p>实例2</p>
<pre><code>var reg = /9/;
var str = &apos;bbs.blueidea.com&apos;;
testReg(reg, str);
</code></pre><p>失败，返回<code>false</code>。</p>
<p>使用字符串的方法执行正则表达式</p>
<p><strong>match方法</strong></p>
<p>形式：<code>str.match(reg)</code>;</p>
<p>与正则表达式的exec方法类似，该方法同样返回一个类似数组的对象，也有<code>input</code>和<code>index</code>属性。我们定义如下一个函数用来测试：</p>
<pre><code>function matchReg(reg, str) {
    var result = str.match(reg);
    if (result) {
            document.write(&apos;index:&apos; + result.index + &apos;&lt;br  /&gt;&apos; + &apos;input:&apos; + result.input + &apos;&lt;br  /&gt;&apos;);
            for (i = 0; i &lt; result.length; i++) {
                    document.write(&apos;result[&apos; + i + &apos;]:&apos; + result[i] + &apos;&lt;br  /&gt;&apos;)
            }
    } else {
            alert(&apos;null：匹配失败！&apos;)
    }
}
</code></pre><p>例如：<br>    var reg = /b/;<br>    var str = ‘bbs.blueidea.com’;<br>    matchReg(reg, str);</p>
<p>结果如下：</p>
<pre><code>index:0
input:bbs.blueidea.com
result[0]:b
</code></pre><p>可见，和<code>exec</code>的结果一样。</p>
<p>但是如果正则表达式设置了<code>g</code>修饰符，<code>exec</code>和<code>match</code>的行为可就不一样了，见下例：</p>
<pre><code>index:undefined
input:undefined
result[0]:b
result[1]:b
result[2]:b
</code></pre><p>设置了<code>g</code>修饰符的正则表达式在完成一次成功匹配后不会停止，而是继续找到所有可以匹配到的字符。返回的结果包括了三个<code>b</code>。不过没有提供<code>input</code>和<code>index</code>这些信息。</p>
<p><strong>replace方法</strong></p>
<p>形式：<code>str. replace (reg,’new str’);</code></p>
<p>它的作用是将<code>str</code>字符串中匹配<code>reg</code>的部分用<code>’’new str”</code>部分代码，值得注意的是原字符串并不会被修改，而是作为返回值被返回。例子：</p>
<pre><code>var reg = /b/;
var str = &apos;bbs.blueidea.com&apos;;
var newStr = str.replace(reg, &apos;c&apos;);
document.write(newStr);
</code></pre><p>结果为<code>cbs.blueidea.com</code>，只有第一个<code>b</code>被替换为<code>c</code>。</p>
<pre><code>var reg = /b/g;
var str = &apos;bbs.blueidea.com&apos;;
var newStr = str.replace(reg, &apos;c&apos;);
document.write(newStr);
</code></pre><p>输出<code>ccs.clueidea.com</code></p>
<p>由于，设置了<code>g</code>修饰符，所以会替换掉所有的<code>b</code>。</p>
<pre><code>var reg = /\w+/g;
var str = &apos;bbs.blueidea.com&apos;;
var newStr = str.replace(reg, &apos;word&apos;);
document.write(newStr);
</code></pre><p>输出：</p>
<pre><code>word.word.word。
</code></pre><p>在<code>replace</code>函数中使用<code>$</code>引用子正则表达式匹配内容</p>
<p>就像在正则里我们可以使用<code>\1</code>来引用第一个子正则表达式所匹配的内容一样，我们在<code>replace</code>函数的替换字符里也可以使用<code>$1</code>来引用相同的内容。</p>
<p>还是来看一个例子吧：</p>
<pre><code>var reg = /(\w+).(\w+).(\w+)/;
var str = &apos;bbs.blueidea.com&apos;;
var newStr = str.replace(reg, &apos;$1.$1.$1&apos;);
document.write(newStr);
</code></pre><p>输出的结果为：</p>
<p><code>bbs.bbs.bbs</code></p>
<p>首先，我们知道第一个子正则表达式匹配到了<code>bbs</code>，那么<code>$1</code>也就代表<code>bbs</code>了。其后我们把替换字符串设置为<code>&#39;$1.$1.$1&#39;</code>,其实也就是<code>“bbs.bbs.bbs”</code>。同理，<code>$2</code>就是<code>blueidea</code>，<code>$3</code>就是<code>com</code>。</p>
<p>在来看一个例子，颠倒空格前后两个单词的顺序。</p>
<pre><code>var reg = /(\w+)\s(\w+)/;
var str = &apos;cainiao  gaoshou&apos;;
var newStr = str.replace(reg, &apos;$2 $1&apos;);
document.write(newStr);
</code></pre><p>结果为：<code>gaoshou cainiao</code>，也就是空格前后的单词被调换顺序了。</p>
<p>由于在替换文本里<code>$</code>有了特殊的含义，所以我们如果想要是用<code>$</code>这个字符的话，需要写成<code>$$</code>，例如：</p>
<pre><code>var reg = /(\w+)\s(\w+)/;
var str = &apos;cainiao  gaoshou&apos;;
var newStr = str.replace(reg, &apos;$ $&apos;);
document.write(newStr);
</code></pre><p>结果为：<code>$ $。</code></p>
<p><code>search</code>方法和<code>split</code>方法<br>同样，字符串的<code>search</code>方法和<code>split</code>方法中也可以使用正则表达式，形式如下：</p>
<pre><code>str.search(reg);
</code></pre><p><code>search</code>返回正则表达式第一次匹配的位置。例子：</p>
<pre><code>var reg = /idea/;
var str = &apos;blueidea&apos;;
var pos = str.search(reg);
document.write(pos);
</code></pre><p>结果为<code>4</code></p>
<p>下面的例子找出第一个非单词字符：</p>
<pre><code>var reg = /\W/;
var str = &apos;bbs.blueidea.com&apos;;
var pos = str.search(reg);
document.write(pos);
</code></pre><p>结果为<code>3</code>，也就是那个点“<code>.</code>”的位置。</p>
<pre><code>str.split(reg,’seprator’);
split返回分割后的数组，例如：
var reg = /\W/;
var str =  &apos;bbs.blueidea.com&apos;;
var arr =  str.split(reg);
document.write(arr);
</code></pre><p>结果为：<code>bbs,blueidea,com</code>，可见数组被非单词字符分为了有三个元素的数组。</p>
<pre><code>var reg = /\W/;
var str = &apos;http://www.baidu.com/&apos;;
var arr = str.split(reg);
document.write(arr.length + &apos;&lt;br  /&gt;&apos;);
document.write(arr);
</code></pre><p>结果为：</p>
<pre><code>7
http,,,www,baidu,com,
</code></pre><p>可见字符串被分为了有<code>7</code>个元素的数组，其中包括了三个为空字符串的元素。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么是正则表达式？&lt;/p&gt;
&lt;p&gt;这个问题可以参见：“正则表达式30分钟入门教程”，很多编程语言都支持正则表达式，本文仅仅讨论JavaScript中的正则表达式。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://tomieric.github.io/categories/JavaScript/"/>
    
    
      <category term="-javascript" scheme="http://tomieric.github.io/tags/javascript/"/>
    
  </entry>
  
</feed>
